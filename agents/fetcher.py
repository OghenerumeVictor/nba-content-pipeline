# agents/fetcher.py

# Placeholder or autogenerated content for agents/fetcher.py

from nba_api.live.nba.endpoints import scoreboard, boxscore
import time
import os
import openai  # use legacy compatible version for now

openai.api_key = os.getenv("OPENAI_API_KEY")

def fetch_nba_data():
    try:
        games = scoreboard.ScoreBoard().get_dict()["scoreboard"]["games"]
        completed = [g for g in games if g["gameStatus"] == 3]
        if not completed:
            return {}

        game_id = completed[0]["gameId"]
        time.sleep(1)  # avoid hitting rate limits
        full_data = boxscore.BoxScore(game_id=game_id).get_dict()
        game = full_data.get("game", {})

        # inject player data into team objects for consistency
        home_players = full_data.get("homeTeam", {}).get("players", [])
        away_players = full_data.get("awayTeam", {}).get("players", [])
        game.setdefault("homeTeam", {})["players"] = home_players
        game.setdefault("awayTeam", {})["players"] = away_players
        return game

    except Exception as e:
        print("Error fetching NBA data:", e)
        return {}

def generate_summary(analysis):
    if not analysis:
        return {"headline": "", "summary": ""}

    performers = analysis["top_performers"]
    performer_lines = [f"{p['name']} - {p['points']} pts" for p in performers]

    prompt = (
        f"Game Recap: {analysis['home_team']} {analysis['home_score']} - "
        f"{analysis['away_team']} {analysis['away_score']}.\n"
        f"Top Performers: {', '.join(performer_lines)}.\n"
        "Write a short headline and a 2-3 sentence game summary."
    )

    response = openai.ChatCompletion.create(
        model="gpt-4",
        messages=[{"role": "user", "content": prompt}],
        max_tokens=150
    )

    result = response["choices"][0]["message"]["content"].split("\n", 1)
    return {
        "headline": result[0].strip(),
        "summary": result[1].strip() if len(result) > 1 else ""
    }
